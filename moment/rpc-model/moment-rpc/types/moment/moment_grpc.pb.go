// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: moment.proto

package moment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MomentClient is the client API for Moment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MomentClient interface {
	CreateMoment(ctx context.Context, in *CreateMomentRequest, opts ...grpc.CallOption) (*CreateMomentReply, error)
	GetMoment(ctx context.Context, in *GetMomentRequest, opts ...grpc.CallOption) (*GetMomentReply, error)
	DelMoment(ctx context.Context, in *DelMomentRequest, opts ...grpc.CallOption) (*DelMomentReply, error)
}

type momentClient struct {
	cc grpc.ClientConnInterface
}

func NewMomentClient(cc grpc.ClientConnInterface) MomentClient {
	return &momentClient{cc}
}

func (c *momentClient) CreateMoment(ctx context.Context, in *CreateMomentRequest, opts ...grpc.CallOption) (*CreateMomentReply, error) {
	out := new(CreateMomentReply)
	err := c.cc.Invoke(ctx, "/moment.Moment/createMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentClient) GetMoment(ctx context.Context, in *GetMomentRequest, opts ...grpc.CallOption) (*GetMomentReply, error) {
	out := new(GetMomentReply)
	err := c.cc.Invoke(ctx, "/moment.Moment/getMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *momentClient) DelMoment(ctx context.Context, in *DelMomentRequest, opts ...grpc.CallOption) (*DelMomentReply, error) {
	out := new(DelMomentReply)
	err := c.cc.Invoke(ctx, "/moment.Moment/delMoment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MomentServer is the server API for Moment service.
// All implementations must embed UnimplementedMomentServer
// for forward compatibility
type MomentServer interface {
	CreateMoment(context.Context, *CreateMomentRequest) (*CreateMomentReply, error)
	GetMoment(context.Context, *GetMomentRequest) (*GetMomentReply, error)
	DelMoment(context.Context, *DelMomentRequest) (*DelMomentReply, error)
	mustEmbedUnimplementedMomentServer()
}

// UnimplementedMomentServer must be embedded to have forward compatible implementations.
type UnimplementedMomentServer struct {
}

func (UnimplementedMomentServer) CreateMoment(context.Context, *CreateMomentRequest) (*CreateMomentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoment not implemented")
}
func (UnimplementedMomentServer) GetMoment(context.Context, *GetMomentRequest) (*GetMomentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoment not implemented")
}
func (UnimplementedMomentServer) DelMoment(context.Context, *DelMomentRequest) (*DelMomentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMoment not implemented")
}
func (UnimplementedMomentServer) mustEmbedUnimplementedMomentServer() {}

// UnsafeMomentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MomentServer will
// result in compilation errors.
type UnsafeMomentServer interface {
	mustEmbedUnimplementedMomentServer()
}

func RegisterMomentServer(s grpc.ServiceRegistrar, srv MomentServer) {
	s.RegisterService(&Moment_ServiceDesc, srv)
}

func _Moment_CreateMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMomentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).CreateMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.Moment/createMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).CreateMoment(ctx, req.(*CreateMomentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moment_GetMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMomentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).GetMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.Moment/getMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).GetMoment(ctx, req.(*GetMomentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moment_DelMoment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMomentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MomentServer).DelMoment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moment.Moment/delMoment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MomentServer).DelMoment(ctx, req.(*DelMomentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Moment_ServiceDesc is the grpc.ServiceDesc for Moment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Moment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moment.Moment",
	HandlerType: (*MomentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createMoment",
			Handler:    _Moment_CreateMoment_Handler,
		},
		{
			MethodName: "getMoment",
			Handler:    _Moment_GetMoment_Handler,
		},
		{
			MethodName: "delMoment",
			Handler:    _Moment_DelMoment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moment.proto",
}
