// Code generated by goctl. DO NOT EDIT!

package mysql_model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	momentFieldNames          = builder.RawFieldNames(&Moment{})
	momentRows                = strings.Join(momentFieldNames, ",")
	momentRowsExpectAutoSet   = strings.Join(stringx.Remove(momentFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	momentRowsWithPlaceHolder = strings.Join(stringx.Remove(momentFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	momentModel interface {
		Insert(ctx context.Context, data *Moment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Moment, error)
		Update(ctx context.Context, data *Moment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMomentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Moment struct {
		Id    int64  `db:"id"`
		Title string `db:"title"`
		Text  string `db:"text"`
	}
)

func newMomentModel(conn sqlx.SqlConn) *defaultMomentModel {
	return &defaultMomentModel{
		conn:  conn,
		table: "`moment`",
	}
}

func (m *defaultMomentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMomentModel) FindOne(ctx context.Context, id int64) (*Moment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", momentRows, m.table)
	var resp Moment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMomentModel) Insert(ctx context.Context, data *Moment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, momentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Text)
	return ret, err
}

func (m *defaultMomentModel) Update(ctx context.Context, data *Moment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, momentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Text, data.Id)
	return err
}

func (m *defaultMomentModel) tableName() string {
	return m.table
}
